# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

AWSTemplateFormatVersion: "2010-09-09"
Description: Using GitLab Webhook to trigger AWS CodeBuild through Amazon API Gateway and AWS Lambda.

Parameters:
  GitLabUsername:
    Type: String
    Default: root
    Description: Username to access your GitLab.
  GitLabPassword:
    Type: String
    NoEcho: true
    Description: Password to access your GitLab. Will be stored in AWS Secrets Manager.
  WebhookSecretToken:
    Type: String
    NoEcho: true
    Description: Use this secret token to secure your webhook. Will be stored in AWS Secrets Manager.
  CodeBuildProjectName: 
    Type: String
    Default: demo-cicd3
    Description: Name of CodeBuild project
  LambdaLayerS3Bucket:
    Type: String
    Description: S3 bucket that contains the Lambda layer ZIP file

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "GitLab Credentials"
        Parameters:
          - GitLabUsername
          - GitLabPassword
          - WebhookSecretToken

Resources:
  SecretGitLabPassword:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name:
        !Join [
          "/",
          ["CloudFormationStack", !Ref AWS::StackName, "GitLabPassword"],
        ]
      SecretString: !Ref GitLabPassword
  SecretGitLabWebhookToken:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name:
        !Join ["/", ["CloudFormationStack", !Ref AWS::StackName, "GitLabToken"]]
      SecretString: !Ref WebhookSecretToken

  RoleForLambda:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  LambdaRolePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName:
        !Join ["-", [LambdaAccessCodeBuildAndSecrets, !Ref AWS::StackName]]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "codebuild:StartBuild"
            Resource: !Sub arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/${CodeBuildProjectName}
          - Effect: Allow
            Action:
              - "secretsmanager:GetSecretValue"
            Resource: !Ref SecretGitLabWebhookToken
      Roles:
        - !Ref RoleForLambda

  LambdaLayer:
    Type: AWS::Lambda::LayerVersion    
    Properties:
      LayerName: boto3
      Description: boto3
      Content:
        S3Bucket: !Ref LambdaLayerS3Bucket
        S3Key: boto3.zip
      CompatibleRuntimes:
        - python3.10
      CompatibleArchitectures:
        - arm64

  WebhookFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          import os

          def lambda_handler(event, context):
              print(f"event = {event}")
              codebuild = boto3.client('codebuild')
              secrets = boto3.client('secretsmanager')
              
              body = json.loads(event['body'])
              print(f"body==={body}")
              
              # 只处理prod或uat，暂时只有prod
              target_branch = body['object_attributes']['target_branch']
              if target_branch != 'main':
                  print ("=====> The git branch does not match, it needs to be the main branch.")
                  return {'statusCode': 403, 'body': 'The git branch does not match, it needs to be the prod branch.'}
                  
              # 通过token校验事件接收权限，token的校验值放在secrets manager中
              secretValues = secrets.get_secret_value(SecretId=os.environ['SECRET_WEBHOOK_ARN'])['SecretString']
              dic_secrets = json.loads(secretValues)
              
              #获得webhook_token并进行验证
              webhook_token = dic_secrets['webhook_token']
              print (f"=====> secret_project_info_json_str is {webhook_token}")
              if event['headers'].get('x-gitlab-token',event['headers'].get('X-Gitlab-Token')) != webhook_token:
                  print ("=====> No permission, Bad Token!")
                  return {'statusCode': 401, 'body': 'Bad Token'}
            
              # # 校验参数  
              # if 'object_attributes' not in body or 'action' not in body['object_attributes']:
              #     print ("=====> No permission, No action field!")
              #     return {'statusCode': 403, 'body': 'No action field!'}
              
              # # 只处理merge_request事件且MR的action为merge时才进行处理
              event_type = body['event_type']
              mr_action = body['object_attributes']['action']
              print(f"=====> event_type={event_type} | target_branch={target_branch} ｜ mr_action={mr_action}")
              if  event_type != 'merge_request' or mr_action != 'merge':
                  print ("=====>No permission, Processing is stopped because the target branch or event type does not satisfy the condition!")
                  return {'statusCode': 403, 'body': 'Does not satisfy the condition'}
          
              # 工程http地址
              git_project_url = body['project']['git_http_url']
              #git_project_url = git_project_url.removeprefix('http://')
              print(f"body==={git_project_url}")
              
              # 工程名称
              git_project_repo = body['repository']['name']
              git_access_token = dic_secrets['git_access_token']
              git_project_id = str(body['project']['id'])
              git_project_iid = str(body['object_attributes']['iid'])
              #print(f"=====>git_project_id={git_project_id}| git_project_url={git_project_url} | git_project_repo={git_project_repo} ｜ event_type={event_type} | target_branch={target_branch}")
              # 启动codeBuild
              codebuild.start_build(
                  projectName=os.environ['CODEBUILD_PROJECT_NAME'],
                  environmentVariablesOverride=[
                      {
                          'name': 'GIT_PROJECT_URL',
                          'value': git_project_url,
                          'type': 'PLAINTEXT'
                      },
                      {
                          'name': 'GIT_PROJECT_NAME',
                          'value': git_project_repo,
                          'type': 'PLAINTEXT'
                      },
                      {
                          'name': 'GIT_ACCESS_TOKEN',
                          'value': git_access_token,
                          'type': 'PLAINTEXT'
                      },
                      {
                          'name': 'GIT_PROJECT_ID',
                          'value': git_project_id,
                          'type': 'PLAINTEXT'
                      },
                      {
                          'name': 'GIT_PROJECT_IID',
                          'value': git_project_iid,
                          'type': 'PLAINTEXT'
                      }
                  ]
              )
              
              print ("=====>build end")

              return {
                  'statusCode': 200,
                  'body': json.dumps('调用codebuild成功')
              }
      Layers:
        - !Ref LambdaLayer
      Role: !GetAtt LambdaExecutionRole.Arn

      Environment:
        Variables:
          SECRET_WEBHOOK_ARN: !Ref SecretGitLabWebhookToken
          CODEBUILD_PROJECT_NAME: !Ref BuildProject
          GITLAB_USERNAME: !Ref GitLabUsername
          SECRET_GITLAB_PASSWORD_ARN: !Ref SecretGitLabPassword
          CODEBUILD_PROJECT_NAME: !Ref CodeBuildProjectName
      Handler: index.lambda_handler
      Architectures:
        - arm64
      Role: !GetAtt RoleForLambda.Arn
      Runtime: python3.10

  ExposedHttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: GitLab webhook
      Target: !GetAtt WebhookFunction.Arn
      ProtocolType: HTTP

  PermissionForApiGatewayToTriggerLambda:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt WebhookFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiID}/*/$default
        - { ApiID: !Ref ExposedHttpApi }

Outputs:
  WebhookURL:
    Description: The URL you need for GitLab Webhook.
    Value: !GetAtt ExposedHttpApi.ApiEndpoint
