version: 0.2
phases:
  install:
    runtime-versions:
      python: 3.9

  pre_build:
    commands:
      - echo Starting to download code from ZEEKR!
      - aws --version
      # #- yum install net-tools -y
      # #- echo `ifconfig`
      # - echo Logging in to Amazon ECR...
      # - aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin 866665982863.dkr.ecr.eu-central-1.amazonaws.com
      # # 安装python环境
      # - pip install --upgrade pip
      # - pip install dbt-core==1.4.5
      # - pip install dbt-redshift==1.4.0
      # - pip install sqlfluff==2.0.3
      # - pip install sqlfluff-templater-dbt==2.0.3
      
  build:
    commands:
      # 拉取gitlab代码
      - echo git clone project `date`
      # 拉取gitlab代码
      - echo git clone project `date`
      - echo Branch is $GIT_BRANCH
      - GIT_PROJECT_URL_TEMP=${GIT_PROJECT_URL#https://}
      #- git clone -b $GIT_BRANCH https://DMZtoken:$GIT_ACCESS_TOKEN@git-devops.zeekrlife.com/bigdata/warehouse/demo_redshift_tpch.git
      - echo Project url is $GIT_PROJECT_URL_TEMP
      - echo "GIT_PROJECT_URL_TEMP========>${GIT_PROJECT_URL_TEMP}"
      - git clone -b $GIT_BRANCH https://DMZtoken:$GIT_ACCESS_TOKEN@$GIT_PROJECT_URL_TEMP
      - ls
      # # 编译DBT代码
      # - echo Compile DBT started on `date`
      # - cd $GIT_PROJECT_NAME
      # - echo execute dbt deps!
      # - dbt deps
      # # 推送镜像到ECS
      # - echo Build image!
      # #- docker build -f ./Dockerfile -t cosmos-dbt:latest .
      # - echo $REPOSITORY_IMGE_PREFIX$GIT_PROJECT_NAME:$REPOSITORY_TAG $REPOSITORY_URI/$REPOSITORY_IMGE_PREFIX$GIT_PROJECT_NAME:$REPOSITORY_TAG
      # - docker build -f ../Dockerfile -t $REPOSITORY_IMGE_PREFIX$GIT_PROJECT_NAME:$REPOSITORY_TAG .
      # - echo Tag image!
      # #- docker tag cosmos-dbt:latest 866665982863.dkr.ecr.eu-central-1.amazonaws.com/cosmos-dbt:latest
      # - docker tag $REPOSITORY_IMGE_PREFIX$GIT_PROJECT_NAME:$REPOSITORY_TAG $REPOSITORY_URI/$REPOSITORY_IMGE_PREFIX$GIT_PROJECT_NAME:$REPOSITORY_TAG
      # - echo Push image!
      # - echo $REPOSITORY_URI/$REPOSITORY_IMGE_PREFIX$GIT_PROJECT_NAME:$REPOSITORY_TAG
      # #- docker push 866665982863.dkr.ecr.eu-central-1.amazonaws.com/cosmos-dbt:latest
      # - docker push $REPOSITORY_URI/$REPOSITORY_IMGE_PREFIX$GIT_PROJECT_NAME:$REPOSITORY_TAG

  post_build:
     commands:
      - |
        GIT_PROJECT_DOMAIN=${GIT_PROJECT_URL#*//}
        GIT_PROJECT_DOMAIN=${GIT_PROJECT_DOMAIN%%/*}
        echo "https://$GIT_PROJECT_DOMAIN/api/v4/projects/$GIT_PROJECT_ID/merge_requests/$GIT_PROJECT_IID/changes"

        # 使用 curl 获取返回的json文件，并使用 jq 解压出增加和修改的文件  
        ADD_MODIFIED_FILES=$(curl --header "PRIVATE-TOKEN: $GIT_ACCESS_TOKEN" "https://$GIT_PROJECT_DOMAIN/api/v4/projects/$GIT_PROJECT_ID/merge_requests/$GIT_PROJECT_IID/changes" | jq -c '.changes[] | select(.old_path | startswith("dags/")) | select(.new_file == true or .renamed_file == true or .modified_file == true) | .new_path')
        echo "ADD_MODIFIED_FILES========>$ADD_MODIFIED_FILES"
        # 对新增或修改的DAG文件进行上传操作
        if [[ -n "$ADD_MODIFIED_FILES" ]]; then
          for i in $ADD_MODIFIED_FILES
          do
            local_file=${i//\"/}
            # 假设你希望在s3存储桶中保留/dags的目录结构
            echo "========>Copy dags $GIT_PROJECT_NAME/$local_file to $MWAA_DAGS_DIR$delfilename begin!"
            aws s3 cp $GIT_PROJECT_NAME/$local_file $MWAA_DAGS_DIR
            echo "========>Copy dags $GIT_PROJECT_NAME/$local_file to $MWAA_DAGS_DIR$delfilename end!"
          done
        fi
        
        DELETED_FILES=$(curl --header "PRIVATE-TOKEN: $GIT_ACCESS_TOKEN" "https://$GIT_PROJECT_DOMAIN/api/v4/projects/$GIT_PROJECT_ID/merge_requests/$GIT_PROJECT_IID/changes" | jq  -c '.changes[] | select(.old_path | startswith("dags/")) | select(.deleted_file == true or .renamed_file == true) | .old_path')
        echo "DELETED_FILES========>$DELETED_FILES"
        # 对删除的DAG文件进行删除操作
        if [[ -n "$DELETED_FILES" ]]; then
          for i in $DELETED_FILES
          do
            s3_file=${i//\"/}
            echo "delete s3_file========>$s3_file"
            delfilename=$(basename "$s3_file")
            echo "========>Delete file $MWAA_DAGS_DIR$delfilename outer!"
            if aws s3 ls $MWAA_DAGS_DIR$delfilename ; then
              echo "========>In delete dags file $MWAA_DAGS_DIR$delfilename begin!"
              aws s3 rm $MWAA_DAGS_DIR$delfilename
              echo "========>In delete dags file $MWAA_DAGS_DIR$delfilename end!"
            fi
          done
        fi

        # 判断DBT工程是否存在，如果存在进行删除
        if aws s3 ls $MWAA_DBT_DIR$GIT_PROJECT_NAME ; then
          echo "========>In delete dbt project file $MWAA_DBT_DIR$GIT_PROJECT_NAME begin!"
          aws s3 rm $MWAA_DBT_DIR$GIT_PROJECT_NAME --recursive
          echo "========>In delete dbt project file $MWAA_DBT_DIR$GIT_PROJECT_NAME end!"
        fi

        # 拷贝DBT工程文件到S3
        aws s3 cp $GIT_PROJECT_NAME $MWAA_DBT_DIR/$GIT_PROJECT_NAME --recursive



